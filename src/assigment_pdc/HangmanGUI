import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class HangmanGUI extends JFrame {
    private GameManager gameManager;
    private JTextField usernameField;
    private JTextField levelField;
    private JTextField guessField;
    private JTextArea gameArea;
    private User currentUser;
    private Game currentGame;

public HangmanGUI() {
        gameManager = new GameManager();
        initialize();
    }

private void initialize() {
        setTitle("Hangman Game");
        setSize(500, 420);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(null);

        JLabel usernameLabel = new JLabel("Username:");
        usernameLabel.setBounds(50, 20, 80, 25);
        add(usernameLabel);

        usernameField = new JTextField();
        usernameField.setBounds(150, 20, 165, 25);
        add(usernameField);

        JLabel levelLabel = new JLabel("Level:");
        levelLabel.setBounds(50, 60, 80, 25);
        add(levelLabel);

        levelField = new JTextField();
        levelField.setBounds(150, 60, 165, 25);
        add(levelField);

        JButton startButton = new JButton("Start Game");
        startButton.setBounds(150, 100, 150, 25);
        add(startButton);

        startButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                startGame();
            }
        });

        JLabel guessLabel = new JLabel("Enter Guess:");
        guessLabel.setBounds(50, 140, 80, 25);
        add(guessLabel);

        guessField = new JTextField();
        guessField.setBounds(150, 140, 50, 25);
        add(guessField);

        JButton guessButton = new JButton("Guess");
        guessButton.setBounds(210, 140, 100, 25);
        add(guessButton);

        guessButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                makeGuess();
            }
        });

        JButton quitButton = new JButton("Quit");
        quitButton.setBounds(320, 140, 100, 25); 
        add(quitButton);

        quitButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                System.exit(0); 
            }
        });

        gameArea = new JTextArea();
        gameArea.setBounds(50, 180, 300, 150);
        gameArea.setEditable(false);
        add(gameArea);

        setVisible(true);
    }
private void startGame() {
        String username = usernameField.getText();
        int level = Integer.parseInt(levelField.getText());
        currentUser = new User(username);
        gameManager.addUser(currentUser);
        gameManager.startGame(currentUser, level);
        currentGame = gameManager.getCurrentGame(currentUser);
        updateGameArea();
    }
private void makeGuess() {
        if (currentGame == null) {
            return;
        }
        String guessText = guessField.getText();
        if (guessText.length() != 1) {
            return; // Invalid input, we expect a single character
        }
        char guess = guessText.charAt(0);
        currentGame.playGame(guess);
        updateGameArea();
    }

private void updateGameArea() {
        if (currentGame == null) {
            return;
        }
        StringBuilder gameText = new StringBuilder();
        gameText.append("Word: ").append(currentGame.getDisplayWord()).append("\n");
        gameText.append("Incorrect Guesses: ").append(currentGame.getIncorrectGuesses()).append("\n");
        gameText.append("Remaining Attempts: ").append(currentGame.getRemainingAttempts()).append("\n");
        if (currentGame.isGameOver()) {
            gameText.append("Game Over! The word was: ").append(currentGame.getSecretWord()).append("\n");
        } else if (currentGame.isWordGuessed()) {
            gameText.append("Congratulations! You guessed the word!\n");
        }
        gameArea.setText(gameText.toString());
    }
}
